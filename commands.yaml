# List of commands to set up a simple kubernetes cluster
# https://www.youtube.com/watch?v=WbaDPlJxaxc <- Great viedo
#
# Master runs kube-api-server, kube-controller-manager, kube-proxy, kube-scheduler and docker registry
# Ip:
# - Master: 10.0.1.1/16
# - Slave: 10.0.10.2/16

etcd:
  download: From https://github.com/etcd-io/etcd/releases latest etcd archive
  run: |-
    mkdir -p /etc/kubernetes/logs
    mkdir /tmp/etcdinstall
    mv {DOWNLOADED_FILE} /tmp/etcdinstall
    tar xzvf /tmp/etcdinstall/{DOWNLOADED_FILE} -C /tmp/etcdinstall --strip-components=1
    mv /tmp/etcdinstall/etcd /usr/bin/
    etcd --listen-client-urls http://localhost:2379 --advertise-client-urls http://localhost:2379 &> /etc/kubernetes/logs/etcd.log &

kube-apiserver:
  download: From https://www.downloadkubernetes.com/ latest kube-apiserver
  run: |-
    mv ./api-server /usr/bin/
    mkdir -p /etc/kubernetes/logs/
    mkdir /etc/kubernetes/certs/
# Place certs in /etc/kubernetes/certs. Generate them according to https://kubernetes.io/docs/tasks/administer-cluster/certificates/
# To connect to the api you'll need to trust the self-signed cert
    kube-apiserver \
      --advertise-address=10.0.1.1 \
      --bind-address=0.0.0.0 \
      --service-cluster-ip-range=10.10.0.0/16 \
      --etcd-servers=http://localhost:2379 \

      --service-account-signing-key-file=/home/tymon_wilczek/certs/key \
      --service-account-key-file=/home/tymon_wilczek/certs/key.pub \
      --service-account-issuer=https://your.mom \
      --client-ca-file=/etc/kubernetes/certs/ca.crt \
      --tls-cert-file=/etc/kubernetes/certs/server.crt \
      --tls-private-key-file=/etc/kubernetes/certs/server.key \
      &> /etc/kubernetes/logs/kube-apiserver.log &

# FUCK THAT
# Maybe I'll try doing it the hard way later
---
# kubeadm

machines-config:
- master:
  - ip: 10.0.2.1/16
  - dns-name: master.k8s
- slave-1:
  - ip: 10.0.2.1/16
- slave-2:
  - ip: 10.0.2.1/16

all-nodes:
- sudo su
- apt update
- apt upgrade -y
- apt install docker.io -y
- sudo apt-get install -y apt-transport-https ca-certificates curl
- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
- mkdir -p /etc/apt/keyrings/
- curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
- echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
- apt-get update
- apt-get install -y kubelet kubeadm kubectl

master-node:
- kubeadm init --pod-network-cidr 10.10.0.0/16
- export KUBECONFIG=/etc/kubernetes/admin.conf
- {apply calico networking config from https://docs.tigera.io/calico/latest/getting-started/kubernetes/self-managed-onprem/onpremises. in my case:}
- kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico-typha.yaml
- echo '{ "insecure-registries":["master.k8s:5000"] }' | sudo tee /etc/docker/daemon.json >/dev/null
- systemctl restart docker
- docker run -d -p 5000:5000 --restart=always --name registry registry:2

slave-node:
- sudo su
- {command generated by master node. Should look like:}
- kubeadm join 10.0.2.1:6443 --token a7sq87.bh6m71i161rl0gt5 \
        --discovery-token-ca-cert-hash sha256:2334b6a3d1745e66108f83b36fa11565777f3ef28a17ccc347d9ac70eb0a69bb
- {After adding node to cluster label it ON MASTER:}
- kubectl label node kubeadm-node-x node-role.kubernetes.io/slave=slave


# To build an image copy the container folder, go inside of it and run:
# docker build . -t connection-logger:v1.0
# docker tag connection-logger:v1.0 master:5000/connection-logger


database:
  master-password: 9eylQAuh:TP1m7|\
  user-password: M9I}[6@;eP~~/K(J
  db-ip: 10.58.144.3




