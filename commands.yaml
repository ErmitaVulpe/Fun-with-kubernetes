#
# This is a list of commands i used. Also used this file as a notepad.
# Just ignore this
#

# List of commands to set up a simple kubernetes cluster
# https://www.youtube.com/watch?v=WbaDPlJxaxc <- Great viedo

machines-config:
- master:
  - hostname: kubeadm-master
  - ip: 10.0.4.1/16
  - dns-name: master.k8s
- slave-1:
  - hostname: kubeadm-slave-1
  - ip: 10.0.4.10/16
- slave-2:
  - hostname: kubeadm-slave-2
  - ip: 10.0.4.11/16

all-nodes:
- sudo su -
- apt update
- apt upgrade -y
- apt install -y docker.io apt-transport-https ca-certificates curl
- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
- mkdir -p /etc/apt/keyrings/
- curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
- echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
- apt-get update
- apt-get install -y kubelet kubeadm kubectl

master-node:
- kubeadm init --config k8s-init-config.yaml
- mkdir -p $HOME/.kube
- sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
- sudo chown $(id -u):$(id -g) $HOME/.kube/config
- {apply calico networking config from https://docs.tigera.io/calico/latest/getting-started/kubernetes/self-managed-onprem/onpremises. in my case:}
- kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico-typha.yaml


# Encountered a weird problem with registry. when creating a cert, client screamed at me that i used cn and not san.
# When i used san (which should have a higher priority than cn) it didn't change anything.
# And when i used only san with blank cn it said that the cert was invalid,
# Switching to https://hub.docker.com/

#- mkdir -p /etc/docker/certs.d/master.k8s && cd /etc/docker/certs.d/master.k8s
#- openssl genrsa -out ca.key 4096
#- openssl req -new -x509 -key ca.key -out ca.crt
#- openssl req -new -out client.csr -newkey rsa:2048 -nodes -sha256 -keyout client.key -config req.conf
#- openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.cert -days 365
#- docker run -d -p 443:443 -v /etc/docker/certs.d/master.k8s:/certs -e REGISTRY_HTTP_ADDR=0.0.0.0:443 -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/client.cert -e REGISTRY_HTTP_TLS_KEY=/certs/client.key --restart=always --name registry registry:2

slave-node:
- {command generated by master node. Should look like:}
- kubeadm join 10.0.4.1:6443 --token h23k40.kedzrhwkovbodxxc \
        --discovery-token-ca-cert-hash sha256:864fb1522c0a19ec1048499c9af569205ff8aa3abc3355b97782a7e6b04415a4 
- {After adding node to cluster label it ON MASTER:}
- kubectl label node kubeadm-slave-x node-role.kubernetes.io/slave=slave


# To build an image copy the container folder, go inside of it and run:
# docker build . -t connection-logger:v1.1
# docker tag connection-logger:v1.1 <your_username>/connection-logger
# docker push <your_username>/connection-logger


# My database:
database:
  master-password: 9eylQAuh:TP1m7|\
  user-password: M9I}[6@;eP~~/K(J
  db-ip: 10.58.144.3