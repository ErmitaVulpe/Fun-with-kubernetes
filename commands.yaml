# List of commands to set up a simple kubernetes cluster
# https://www.youtube.com/watch?v=WbaDPlJxaxc <- Great viedo
#
# Master runs kube-api-server, kube-controller-manager, kube-proxy, kube-scheduler and docker registry
# Ip:
# - Master: 10.0.1.1/16
# - Slave: 10.0.10.2/16

etcd:
  download: From https://github.com/etcd-io/etcd/releases latest etcd archive
  run: |-
    mkdir -p /etc/kubernetes/logs
    mkdir /tmp/etcdinstall
    mv {DOWNLOADED_FILE} /tmp/etcdinstall
    tar xzvf /tmp/etcdinstall/{DOWNLOADED_FILE} -C /tmp/etcdinstall --strip-components=1
    mv /tmp/etcdinstall/etcd /usr/bin/
    etcd --listen-client-urls http://localhost:2379 --advertise-client-urls http://localhost:2379 &> /etc/kubernetes/logs/etcd.log &

kube-apiserver:
  download: From https://www.downloadkubernetes.com/ latest kube-apiserver
  run: |-
    mv ./api-server /usr/bin/
    mkdir -p /etc/kubernetes/logs/
    mkdir /etc/kubernetes/certs/
# Place certs in /etc/kubernetes/certs. Generate them according to https://kubernetes.io/docs/tasks/administer-cluster/certificates/
# To connect to the api you'll need to trust the self-signed cert
    kube-apiserver \
      --advertise-address=10.0.1.1 \
      --bind-address=0.0.0.0 \
      --service-cluster-ip-range=10.10.0.0/16 \
      --etcd-servers=http://localhost:2379 \

      --service-account-signing-key-file=/home/tymon_wilczek/certs/key \
      --service-account-key-file=/home/tymon_wilczek/certs/key.pub \
      --service-account-issuer=https://your.mom \
      --client-ca-file=/etc/kubernetes/certs/ca.crt \
      --tls-cert-file=/etc/kubernetes/certs/server.crt \
      --tls-private-key-file=/etc/kubernetes/certs/server.key \
      &> /etc/kubernetes/logs/kube-apiserver.log &

# FUCK THAT
# Maybe I'll try doing it the hard way later
---
# kubeadm

machines-config:
- master:
  - hostname: kubeadm-master
  - ip: 10.0.4.1/16
  - dns-name: master.k8s
- slave-1:
  - hostname: kubeadm-slave-1
  - ip: 10.0.4.10/16
- slave-2:
  - hostname: kubeadm-slave-2
  - ip: 10.0.4.11/16

all-nodes:
- sudo su -
- apt update
- apt upgrade -y
- echo '{ "insecure-registries":["master.k8s:5000"] }' | sudo tee /etc/default/docker.json >/dev/null
- apt install -y docker.io apt-transport-https ca-certificates curl
- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
- mkdir -p /etc/apt/keyrings/
- curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
- echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
- apt-get update
- apt-get install -y kubelet kubeadm kubectl

master-node:
- kubeadm init --config kubeadm-config.yaml
- mkdir -p $HOME/.kube
- sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
- sudo chown $(id -u):$(id -g) $HOME/.kube/config
- {apply calico networking config from https://docs.tigera.io/calico/latest/getting-started/kubernetes/self-managed-onprem/onpremises. in my case:}
- kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico-typha.yaml
- mkdir -p /etc/docker/certs.d/master.k8s && cd /etc/docker/certs.d/master.k8s
- openssl genrsa -out ca.key 4096
- openssl req -new -x509 -key ca.key -out ca.crt
- openssl req -new -out client.csr -newkey rsa:2048 -nodes -sha256 -keyout client.key -config req.conf
- openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.cert -days 365
- mv ca.key ~
- docker run -d -p 443:443 -v /etc/docker/certs.d/master.k8s:/certs -e REGISTRY_HTTP_ADDR=0.0.0.0:443 -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/client.cert -e REGISTRY_HTTP_TLS_KEY=/certs/client.key --restart=always --name registry registry:2

slave-node:
- {command generated by master node. Should look like:}
- kubeadm join 10.0.4.1:6443 --token wbgztd.xy6ak8xz3k5y3bz2 \
        --discovery-token-ca-cert-hash sha256:5796beed6d23ff5168fb59c9680de8e5ee4fd05e709706fb3f971938904ea306 
- {After adding node to cluster label it ON MASTER:}
- kubectl label node kubeadm-slave-x node-role.kubernetes.io/slave=slave


# To build an image copy the container folder, go inside of it and run:
# cp /etc/docker/certs/docker.crt .
# docker build . -t connection-logger:v1.1
# docker tag connection-logger:v1.1 master.k8s/connection-logger
# docker push master.k8s/connection-logger


database:
  master-password: 9eylQAuh:TP1m7|\
  user-password: M9I}[6@;eP~~/K(J
  db-ip: 10.58.144.3




